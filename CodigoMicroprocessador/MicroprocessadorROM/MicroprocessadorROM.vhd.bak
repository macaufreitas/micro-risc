--------------------------------------------------------------------------------------
---------------- Codigo que implementa o Microprocessador com uma ROM-----------------
--------------------------------------------------------------------------------------

-------- Bibliotecas e Pacotes -------
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
--------------------------------------

entity MicroprocessadorROM is
	port(
		clk	 : in    std_logic;
		reset  : in    std_logic;
		data   : in    std_logic_vector(15 downto 0);
		addr   : out   std_logic_vector(19 downto 0)
	);
end MicroprocessadorROM;

architecture ArquiteturaMicroROM of MicroprocessadorROM is
	--declaração dos sinais
	
	--sinal que relaciona o status da fila de instruções
	signal sitFilaSig    : std_logic;
	signal leFilaSig     : std_logic;
	
	--sinal que habilita a fila
	signal habFilaSig    : std_logic;

	--controles da ALU
	signal ctrlULASig    : std_logic_vector(2  downto 0);
	signal habULASig     : std_logic;
	
	--controles do registro de proposito geral
	signal regDataLeSig  : std_logic;
	signal ctrlRegDataSig: std_logic_vector(2  downto 0);
	signal habRegDataSig	: std_logic;
	
	--sinal de saida do registro de dados
	signal regDataOutSig : std_logic_vector(15 downto 0);
	
	--sinais do Demultiplexador
	signal saidaDemuxULA : std_logic_vector(15 downto 0);
	signal saidaDemuxUC  : std_logic_vector(15 downto 0);
	signal ctrlDemux		: std_logic;
	
	--sinais da Unidade Logica
	signal carryOutSig : std_logic;
	signal zeroSig		 : std_logic;
	signal resultSig	 : std_logic_vector(15 downto 0);
	
	--sinal de saída dos Flags
	signal flagsSig    : std_logic_vector(15 downto 0);
	
	--declaracao dos componentes a serem utilizados
	
	--Unidade Logica Aritmetica
	component ULA
		port (
		clock	            : in  std_logic;
		seletor 	         : in  std_logic_vector(2 downto 0); -- seletor de operações
		vemUm	            : in  std_logic;
		entradaA			   : in  std_logic_vector(15 downto 0); -- entrada de dados A
		entradaB			   : in  std_logic_vector(15 downto 0); -- entrada de dados B
		habilitaULA		   : in  std_logic;
		vaiUm		         : out std_logic;
		zero			      : out std_logic;
		resultado         : out std_logic_vector(15 downto 0)
	);
	end component;
	
	--Unidade de controle
	component UnidadeDeControle
		port(
			clock       	: in  std_logic;
			reset       	: in  std_logic;
			opcode      	: in  std_logic_vector(15 downto 0);
			sitFila     	: in  std_logic;
			leFila      	: out std_logic;
			habULA	   	: out std_logic;
			ctrlULA     	: out std_logic_vector(2 downto 0);
			regDataLe   	: out std_logic;
			habRegData	   : out std_logic;
			ctrlRegData 	: out std_logic_vector(2 downto 0);
			ctrlDemuxData  : out std_logic
		);
	end component;
	
	--Registro de Proposito Geral
	component RegistroPropositoGeral
		port (
			clock           : in std_logic;
			reset           : in std_logic;
			habilita        : in std_logic;
			leitura_Escrita : in std_logic;
			seletor         : in std_logic_vector  (2 downto 0);
			entradaDados    : in std_logic_vector  (15 downto 0);
			saidaDados      : out std_logic_vector (15 downto 0)
		);
	end component;
	
	--Demultiplexador
	component Demultiplexador is
		port (
			entrada  : in std_logic_vector (15 downto 0);
			saida_01 : out std_logic_vector (15 downto 0);
			saida_02 : out std_logic_vector (15 downto 0);
			seletor  : in std_logic
		);
	end component;
	
	--Registro de Flags
	component RegistroFlags is
	  port (
		reset        : in std_logic;
		clock        : in std_logic;
		Overflow     : in std_logic;
		Direction    : in std_logic;
		Interrupt    : in std_logic;
		Trap         : in std_logic;
		Sign         : in std_logic;
		Zero         : in std_logic;
		Adjust       : in std_logic;
		Parity       : in std_logic;
		Carry        : in std_logic;
		Flags		    : out std_logic_vector(15 downto 0)
	);
   end component;
		
	
--Inicio do código de comportamento
begin
	--Definindo as ligações entre as unidades
	
	--Ate o momento para realizar os testes não estamos considerando acesso a memória, portanto ainda nao esta incluso o
	--Registro de Segmentos e a Fila de Instrucoes
	
	--Demultiplexador que define se o dado vai para a Unidade de Controle ou diretamente para a ALU
	D1: Demultiplexador port map(data,
								 saidaDemuxULA,
								 saidaDemuxUC,
								 ctrlDemux);
	
	--Unidade de Controle
	UC: UnidadeDeControle port map(clk,
								   reset,
								   saidaDemuxUC,
								   --sitFilaSig,
									'1',
								   leFilaSig,
								   habULASig,
								   ctrlULASig,
								   regDataLeSig,
								   habRegDataSig,
									ctrlRegDataSig,
								   ctrlDemux);
	--ULA
	UnidadeLogicaArit: ULA port map(clk,
									ctrlULASig,
									flagsSig(0),
									saidaDemuxULA,
									regDataOutSig,
									habULASig,
									carryOutSig,
									zeroSig,
									resultSig);
	
	--Registro de Dados
	RegistroDados: RegistroPropositoGeral port map(clk,
												   reset,
												   habRegDataSig,
												   regDataLeSig,
													ctrlRegDataSig,
													resultSig,
												   regDataOutSig);
	--Registro de Flags
	RegFlags:	RegistroFlags port map(reset,
												  clk,
												  '0',
												  '0',
												  '0',
												  '0',
												  '0',
												  zeroSig,
												  '0',
												  '0',
												  carryOutSig,
												  flagsSig);
													
end ArquiteturaMicroROM;