library IEEE;

use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Microprocessador is
	port(
		clk	   : in    std_logic;
		reset  : in    std_logic;
		data   : in    std_logic_vector(15 downto 0);
		addr   : out   std_logic_vector(19 downto 0)
	);
end Microprocessador;

architecture arquitetura of Microprocessador is
	--declaração dos sinais
	
	--sinal que relaciona o status da fila de instruções
	signal sitFilaSig    : std_logic;
	signal leFilaSig     : std_logic;
	
	--sinal que habilita a fila
	signal habFilaSig    : std_logic;

	--controles da ALU
	signal ctrlALUSig    : std_logic_vector(2  downto 0);
	signal habALUSig     : std_logic;
	
	--constroles do registro de dados
	signal regDataEscSig : std_logic;
	signal regDataLeSig  : std_logic;
	signal ctrlRegDataSig: std_logic_vector(2  downto 0);
	
	--sinal de saida do registro de dados
	signal regDataOutSig : std_logic_vector(15 downto 0);
	
	
	--declaracao dos componentes a serem utilizados
	
	--Unidade Logica Aritmetica
	component ULA
		port (
		signal clock	           : in  std_logic;
		signal seletor 	           : in  std_logic_vector(2 downto 0); -- seletor de operações
		signal vemUm	           : in  std_logic;
		signal entradaA			   : in  std_logic_vector(15 downto 0); -- entrada de dados A
		signal entradaB			   : in  std_logic_vector(15 downto 0); -- entrada de dados B
		signal habilitaULA		   : in  std_logic;
		signal vaiUm		       : out std_logic;
		signal zero			       : out std_logic;
		signal resultado           : out std_logic_vector(15 downto 0)
	);
	end component;
	
	--Unidade de controle
	component UnidadeDeControle
		port(
			clock       	: in  std_logic;
			reset       	: in  std_logic;
			opcode      	: in  std_logic_vector(15 downto 0);
			sitFila     	: in  std_logic;
			leFila      	: out std_logic;
			habALU	   	    : out std_logic;
			ctrlALU     	: out std_logic_vector(2 downto 0);
			regDataEsc  	: out std_logic;
			regDataLe   	: out std_logic;
			ctrlDemuxData   : out std_logic;
			ctrlRegData 	: out std_logic_vector(2 downto 0);
			enRegData	    : out std_logic
		);
	end component;
	
	--Registro de Proposito Geral
	component RegistroPropositoGeral
		port (
		clock           : in std_logic;
		reset           : in std_logic;
		habilita        : in std_logic;
		leitura_Escrita : in std_logic;
		seletor         : in std_logic_vector (2 downto 0);
		entradaDados    : in std_logic_vector (15 downto 0);
		saidaDados      : out std_logic_vector (15 downto 0)
		);
	end component;
	
	--Demultiplexador
	component Demultiplexador is
		port (
			entrada  : in std_logic_vector (15 downto 0);
			saida_01 : out std_logic_vector (15 downto 0);
			saida_02 : out std_logic_vector (15 downto 0);
			seletor  : in std_logic
		);
	end component;
		
	
--Inicio do código de comportamento
begin
	--Definindo as ligações entre as unidades
	
	--Ate o momento para realizar os testes não estamos considerando acesso a memória, portanto ainda nao esta incluso o
	--Registro de Segmentos e a Fila de Instrucoes
	
	--Demultiplexador que define se o dado vai para a Unidade de Controle ou diretamente para a ALU
	D1: Demultiplexador port map(data,
								 saidaDemuxULA,
								 saidaDemuxUC,
								 ctrlDemux);
	
	--Unidade de Controle
	UC: UnidadeDeControle port map(clk,
								   reset,
								   saidaDemuxUC,
								   sitFilaSig,
								   leFilaSig,
								   habALUSig,
								   ctrlALUSig,
								   regDataEscSig,
								   regDataLeSig,
								   ctrlDemux,
								   ctrlRegDataSig,
								   habRegDataSig);
	--ULA
	UnidadeLogicaArit: ULA port map(clk,
									ctrlALUSig,
									carryInSig,
									saidaDemuxULA,
									saidaRegDados,
									habALUSig,
									carryOutSig,
									zeroSig,
									resultSig);
	
	--Registro de Dados
	RegistroDados: RegistroPropositoGeral port map(clk,
												   reset,
												   habRegData,
												   ctrlRegDataSig,
												   regDataEscSig,
												   regDataLeSig,
												   regDataOutSig);
	

end arquitetura;
	