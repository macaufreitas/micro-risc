--------------------------------------------------------------------------------------
-----    Codigo que implementa a Unidade de Controle do Microprocessador        ------
--------------------------------------------------------------------------------------

-------- Bibliotecas e Pacotes -------
library ieee;
use ieee.std_logic_1164.all;
use work.uc_aux.all;
--------------------------------------

entity UnidadeDeControle is
	port(
			clock       	: in  std_logic;
			reset       	: in  std_logic;
			opcode      	: in  std_logic_vector(15 downto 0);
			sitFila     	: in  std_logic;
			leFila      	: out std_logic;
			habALU	   	    : out std_logic;
			ctrlALU     	: out std_logic_vector(2 downto 0);
			regDataEsc  	: out std_logic;
			regDataLe   	: out std_logic;
			ctrlDemuxData   : out std_logic;
			ctrlRegData 	: out std_logic_vector(2 downto 0);
			habRegData	    : out std_logic
	);
end UnidadeDeControle;

architecture Arquitetura of UnidadeDeControle is
	signal Estado         : Tipo_estado; --Estado da unidade de controle
	signal opcodeFetch    : std_logic_vector(15 downto 0); --Opcode a ser decodificado

begin

--Definicao do processo de borda de subida que altera os sinais
borda_subida : process(clock, reset)
begin
	
	if reset = '0' then
	
	-- todas saidas zeradas
		leFila       <= '0';
		opcodeFetch  <= (others => '0');
		habALU       <= '0';
		ctrlALU      <= "000";
		ctrlRegData  <= "000";
		regDataLe    <= '0';
		regDataEsc   <= '0';
		enRegData	 <= '0';
		ctrlDemuxData<= '1';
	
	elsif rising_edge(clock) then

		case Estado is
		
			when Busca =>
				--pega o opcode da Fila de instrucoes
				leFila  <= '1';
				--pega 
				ctrlDemuxData <= '1';
				
			when Fetch =>
				--seta o opcode a ser decodificado
				opcodeFetch <= opcode;
				--para de ler a fila
				leFila      <= '0';
				
			when OpRegImed16 =>
				--operaÃ§Ã£o de Reg/Imediato de 16 bits
				--habilita a leitura da fila para ler mais 16 bits
				leFila        <= '1';
				--seta o controle do Demux para direcionar o dado direto para a ALU
				ctrlDemuxData <= '0';
				--habilita a ALU para gravar o dado
				habALU        <= '1';
						
			when Add_regImed_16 =>
				--operacao de adicao
				ctrlALU     <= b"000"; --ADD
				--seta o registro para ler o dado e zera para a escrita
				regDataLe   <= '1';
				regDataEsc  <= '0';
				--passa para o controle do registro de dados o registro a ser utilizado
				ctrlRegData <= opcodeFetch(2 downto 0);
				
			when Sub_regImed_16 =>
				habALU      <= '1';
				ctrlALU     <= b"100"; --SUB
				enRegData	<= '1';
				regDataLe   <= '1';
				regDataEsc  <= '0';
				ctrlRegData <= opcodeFetch(2 downto 0);
			
			when ResultRegImed =>
				--Captura o resultado e salva no registro
				regDataEsc  <= '1';
				regDataLe   <= '0';	
				
			when fimInstrucao =>
				--Fim da interpretacao da instrucao!
				hanRegData  <= '0';
				habALU      <= '0';
				ctrlALU     <= (others => '0');
				regDataEsc  <= '0';
				ctrlRegData <= (others => '0');
				
			when Erro =>
				--seta tudo para '0' e trava a maquina
				regDataLe   <= '0';
				regDataEsc  <= '0';
				habALU      <= '0';
				ctrlALU     <= (others => '0');
				ctrlRegData <= (others => '0');
	
		end case;
	end if;
end process;

--definicao do processo de borda de descida que toma a decisao para o proximo estado
borda_descida : process(clock,reset)
begin

	if (reset = '0') then
	  
		--Mantem em estado de busca
		Estado <= Busca;
		
	elsif falling_edge(clock) then
		
		--Troca os estados
		case Estado is
			
			--Caso estado de Busca, passa para a decodificao ( Fecth )
			when Busca => 
			 if(sitFila = '0') then
					Estado <= Busca;
			 else
					Estado <= Fetch;
			 end if;
			
			--Caso estado de Fetch descobrir para qual estado a maquina ira, de acordo com os
			--16 primeiro  bits
			--Operacao com Imediato de 16 = 1000 0001 = 81h
			when Fetch => 
				case opcodeFetch(15 downto 8) is
					when x"81"  => Estado <= OpRegImed16;
					when others => Estado <= Erro;
				end case;
			
			--Caso seja uma operacao de Registro,Imediato de 16 bits
			--Analisa os 5 proximos bits para verificar qual operacao a ser realizada
			-- 11000 = Add
			when OpRegImed16 =>
				case opcodeFetch(7 downto 3) is
					when b"11000" => Estado <= Add_regImed_16;
					when b"11101" => Estado <= Sub_regImed_16;
					when others   => Estado <= Erro;
				end case;
			
			--Apos a adicao pula para o resultado de Registro Imediato e escreve o valor no registro
			when Add_regImed_16 => Estado <= ResultRegImed;
			
			--Apos a subtracao pula para o resultado de Registro Imediato e escreve o valor no registro
			when Sub_regImed_16 => Estado <= ResultRegImed;
			
			--Apos salvo o registro Imediato, passa para a finalizacao
			when ResultRegImed => Estado <= FimInstrucao;
			
			--Quando e o fim da instrucao verifica se a fila nao esta vazia e volta para a Busca
			when FimInstrucao => Estado <= Busca;
				
			--Caso algum erro ocorra no percorrer da instrucao a maquina trava
			when Erro   => Estado <= Erro;	
		end case;
	end if;
end process;

end Arquitetura;